XOR_KEY = (
    b'l\xab\x05\xe3\xa03Y\xea\x8d@\xbc\xee\x9a\xef\xcb\xcd]\x8aj\xd1u\xa9v\xb7'
    b'T\xf3yi\xae/+2\xf8\xe0\xf4\xd4\xe9\xb2\x05\x0f\xc3\x9dH\xec\xde\xbd\xc6'
    b'H~\xeaH\xec$\xb0\xa4\x80W3/c\xc6u+\rN\xc8M\x8464\xf3\xb9{\xae[{\r2J\x14'
    b'Y\xed\x96_{g\xf9\x17\x8c C\x9e\x8e\xf70\xa7\x19y\x90\xf8\x12\x87\xcd\x0f'
    b'\x05\x11,\x1f\x83\xceH\xcc\xcb\xfa?\xec\xb4\x08\xcc\xedl>6>\x08\x0f$\xdb'
    b'\xe2\xab*\x07\x9a\x98\xd9\xa7\xebW\x99\xca\x8c\x88_[d\xf4\xbc\x8d=\xe3n'
    b'U1\x1e\xd7\x19\x93C\x1d\x1c5y\x9c|\xde\xd9\xeb\x0f\x1a\xb9\xdf\x8d\xe0'
    b'\x08\xaa\xc6\x02\xeeQL%\x14S\x9a\xc4\xf5\xb7\xbb\x1d\xda\xc2,!K5\xe3:\x8c'
    b'\xb8\x9cV\xbav\xd7\xff\xf7\xef\xf0k!\nM\x0f\x9f\xab\n;\x9f\xa9\xcd1\x01E'
    b'\xd6\tw}\x8e\xc32Y?1\xd7\xc3\xd7\xb1\xcf\x01\xeb\xf4\x84\x11\xe0\xbevD'
    b'\x16\x88\xd4\xb2Rl\xa6\xd2Os\xf7$&\x1b\xd1\xda\xb2h|\x8c7\xd8I\x86\xed'
    b'\xd8\x02x\xb04\xf0\x8b\xa9<\x19\x1f5\x1f\xf9\xdaB\x90s\xa4\xc8U\xe6\x01'
    b'\xd1\xcd\xff\n\x8e\xc9v\xf6\x11zA\xb34O\xbf\xe5\xcb\xc1"\x91,1Dl\xa6\xdd'
    b'\xad\xcen\x9a]\r\x81\xe6q\xffx1\x025\x1d\xc0V\xc8(\xdd\x89]*\x855b\xd7'
    b'\xda]\x03\r\xa7N\t\x837_\x16\x98\xab\xe3\xeaA\x9b\x08\xbe\xdf\x91\xcb\xab'
    b'\x89\xb8\xe1\x01\x82\xe8yP\xd4\xa4\xdbx\xc4H\xa6\xa8ZLT\xb8\x86\x1d\xfd'
    b'BO\xff\xd3 T\x1bawxy\xf1\x9d\xc0\xf8w\xf2^\xb9\x7f\xac\x95J\xf9\xd4\x10'
    b'\xdc\xfcP\xdca\x08-\xf6NJ\xdb\x15c5\x14\xc3\x9e7\xf3\x14\x85\xd1\x1b\xe9'
    b'\x05\xb4\xc1\xda\x82U\xebx\xa3G\xb1_\x0e\xe2\x85-\xd5\xca!a\xef25u\\,'
    b'\xfer\xb3\xaf\x1d\xba\xb3\xa0p4~R\xe2^ez\xd3\xe7S\xb4\xad\xff\xc2\xc8D'
    b'\xb3\xaaE\xc2\xeaD\xc7\xfa\xc6\xde\x03\x82\x13\xb8\x17\x11\xa9\x1fo\xbf'
    b'\x98\x9f\xc6!\xc5\xc9-\xd7\x19"\xbd\xd2>\'\xca\xe7+N\x86\x8f\xae\xb6\xf3'
    b'\xab\x10\xef\x86{\x13\xffK\xbcW)\xbc\n\xd0w>\x17\x9b\xc3\xd6|,\x87\xfa'
    b'BZ\xd1\x8d<^\xe5\x8d\x00\xfdeC\x87\xd0\x00l\xb0\xaf\xd9\xad\x8b-U\xa3'
    b'\xa8\xf6\xb3\x8a\x81\xcc_!\xd9\xb8\x00\x98\x93\x01v\\\x04\x16u\xd7\xe5'
    b'\xd8\x8cQ\x84b\xc4\xa3b\xee\xff\xbd7\xd6=pN\xed\xfa\xc0p\xdc\x85fN\xd3l'
    b'H\x85\xb6z\x19\x9e9\x9e\xdfg\xf3\xdf\xd8ss1I\xbf\x7f?\xe3G\x17\xe5n\x9d'
    b'\xda\xe1<\xf4\xd0\x02M\x80c\xb2Y)x\x11/\x8f\x07\x86{\x82\x16\x90\xaa \xba'
    b'\x20\x16\x9d\xce\xd8\xfb\xde^\xfdS$\x8e\x99H\x83\xaf-\x00A\xa1\xac\x8e'
    b'\xea\x89\x83\x03\x9ej\x916\xf8\xc4\xb7\x0e\xd9\xfd\xf1Z\x10\x7fF\x1dj\x19'
    b'\xe4a\x06\x9f}\x8e\xf1\xfe\x86\x1aZ\xaf\xd9\xd4\xd08\x04W\x94\x7f\xc2I'
    b'\xd6\x1e\xdf_3\x0bb\xc0t-\x96\xd9h/\x99\x89\x84wJ\xb77c\x83m~U%\xe46\x0e'
    b'\xda`Yj\x93\xc9x/\x94\x978l\x03\xa3k\x14\x90D\'B\xd6\xc2\x81\xa8oW\xb8'
    b'\xc1\x0f9\xf0f\x92\xe1\xfd\xb6\x80\xc3\xcd\xa2\x9eo\xe0h\x85H`\xe7\xa0'
    b'\xf1aj\xdd\x94\x9eR\xef\xbd\x04\xd9\x93KE\xf8\x8d\xcd\xb9d\xa05%.R1\xbc'
    b'\x06a\xcf0LY\x0b\xfa\xd5h\xcf.a\x7fr\xb1{\xcd`\x8f\xb1\xe1\x9bB\xdc\xd8'
    b'\x05x\xe5\x05\xc5\x84x\r\xddJ"\x14\xa6&\xa3\x9bt4q\x01\xf7\x97\xcd\xd0'
    b'\xfc;\xb8\xbf\x85w\x19\xc0\x9c\x85=6_j\n\x18\x1cc.A)\xf8\xa3\xc6\xda\x08'
    b'\xf7\x16oG\xbd\xc4J\x9f4\xc5\xa1\\\x16z\x0b\x92\xe5\xd28\xb4\xcc\x9f\xb2'
    b'\xbey\xfc>+\xb5\xa7\xde\xd1\x90c\xad\xa2\xa1\x89\xb4\xf8\xbe.8\xc1\x83'
    b'W\xe7r\x99V\x8e\xfd)\x98n\xae\xbc\xa8\xda\xd2k!\xa9v\x12\x83\x86)P'
)

def xor_data(data: bytes, key: bytes = XOR_KEY) -> bytes:
    """
    Applies XOR encryption/decryption on the input data using the provided key. 
    This function is used for both encryption and decryption.

    :param data (bytes): The data to be encrypted or decrypted.
    :param key (bytes): The key used for the XOR operation. Default is a predefined XOR_KEY.

    Returns:
        bytes: The xored data.
    """
    # If the data is longer than the key, extand it
    extended_xor_key = key * (int(len(data) / len(key)) + 1)
    return bytes(a^b for a, b in zip(*map(bytearray, [data, extended_xor_key]))) 
